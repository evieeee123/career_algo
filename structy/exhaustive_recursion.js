// subsets

    // Write a function, subsets, that takes in an array as an argument.The function should return a 2D array where each subarray represents one of the possible subsets of the array.
    // The elements within the subsets and the subsets themselves may be returned in any order.
    // You may assume that the input array contains unique elements.

    // test_00:
        // subsets(['a', 'b']); // ->
        // [
        //   [],
        //   [ 'b' ],
        //   [ 'a' ],
        //   [ 'a', 'b' ]
        // ]
    // test_01:
        // subsets(['a', 'b', 'c']); // ->
        // [
        //   [],
        //   [ 'c' ],
        //   [ 'b' ],
        //   [ 'b', 'c' ],
        //   [ 'a' ],
        //   [ 'a', 'c' ],
        //   [ 'a', 'b' ],
        //   [ 'a', 'b', 'c' ]
        // ]
    // test_02:
        // subsets(['x']); // ->
        // [
        //   [],
        //   [ 'x' ]
        // ]
    // test_03:
        // subsets([]); // ->
        // [
        //   []
        // ]
    // test_04:
        // subsets(['q', 'r', 's', 't']); // ->
        // [
        //   [],
        //   [ 't' ],
        //   [ 's' ],
        //   [ 's', 't' ],
        //   [ 'r' ],
        //   [ 'r', 't' ],
        //   [ 'r', 's' ],
        //   [ 'r', 's', 't' ],
        //   [ 'q' ],
        //   [ 'q', 't' ],
        //   [ 'q', 's' ],
        //   [ 'q', 's', 't' ],
        //   [ 'q', 'r' ],
        //   [ 'q', 'r', 't' ],
        //   [ 'q', 'r', 's' ],
        //   [ 'q', 'r', 's', 't' ]
        // ]




// permutations

    // Write a function, permutations, that takes in an array an argument.The function should return a 2D array where each subarray represents one of the possible permutations of the array.
    // The subarrays may be returned in any order.
    // You may assume that the input array contains unique elements.

    // test_00:
        // permutations(['a', 'b', 'c']); // ->
        // [
        //   [ 'a', 'b', 'c' ],
        //   [ 'b', 'a', 'c' ],
        //   [ 'b', 'c', 'a' ],
        //   [ 'a', 'c', 'b' ],
        //   [ 'c', 'a', 'b' ],
        //   [ 'c', 'b', 'a' ]
        // ]
    // test_01:
        // permutations(['red', 'blue']); // ->
        // [
        //   [ 'red', 'blue' ],
        //   [ 'blue', 'red' ]
        // ]
    // test_02:
        // permutations([8, 2, 1, 4]); // ->
        // [
        //   [ 8, 2, 1, 4 ], [ 2, 8, 1, 4 ],
        //   [ 2, 1, 8, 4 ], [ 2, 1, 4, 8 ],
        //   [ 8, 1, 2, 4 ], [ 1, 8, 2, 4 ],
        //   [ 1, 2, 8, 4 ], [ 1, 2, 4, 8 ],
        //   [ 8, 1, 4, 2 ], [ 1, 8, 4, 2 ],
        //   [ 1, 4, 8, 2 ], [ 1, 4, 2, 8 ],
        //   [ 8, 2, 4, 1 ], [ 2, 8, 4, 1 ],
        //   [ 2, 4, 8, 1 ], [ 2, 4, 1, 8 ],
        //   [ 8, 4, 2, 1 ], [ 4, 8, 2, 1 ],
        //   [ 4, 2, 8, 1 ], [ 4, 2, 1, 8 ],
        //   [ 8, 4, 1, 2 ], [ 4, 8, 1, 2 ],
        //   [ 4, 1, 8, 2 ], [ 4, 1, 2, 8 ]
        // ]
    // test_03:
        // permutations([]); // ->
        // [
        //  [ ]
        // ]





// create combinations

    // Write a function, createCombinations, that takes in an array and a length as arguments.The function should return a 2D array representing all of the combinations of the specifized length.
    // The items within the combinations and the combinations themselves may be returned in any order.
    // You may assume that the input array contains unique elements and 1 <= k <= items.length.

    // test_00:
        // createCombinations(["a", "b", "c"], 2); // ->
        // [
        //   [ 'a', 'b' ],
        //   [ 'a', 'c' ],
        //   [ 'b', 'c' ]
        // ]
    // test_01:
        // createCombinations(["q", "r", "s", "t"], 2); // ->
        // [
        //   [ 'q', 'r' ],
        //   [ 'q', 's' ],
        //   [ 'q', 't' ],
        //   [ 'r', 's' ],
        //   [ 'r', 't' ],
        //   [ 's', 't' ]
        // ]
    // test_02:
        // createCombinations(['q', 'r', 's', 't'], 3)); // ->
        // [
        //   [ 'q', 'r', 's' ],
        //   [ 'q', 'r', 't' ],
        //   [ 'q', 's', 't' ],
        //   [ 'r', 's', 't' ]
        // ]
    // test_03:
        // createCombinations([1, 28, 94], 3); // ->
        // [
        //   [ 1, 28, 94 ]
        // ]





// parenthetical possibilities

    // Write a function, parentheticalPossibilities, that takes in a string as an argument.The function should return an array containing all of the strings that could be generated by expanding all parentheses of the string into its possibilities.
    // For example, the possibilities for 'x(mn)yz' are 'xmyz', 'xnyz'.

    // test_00:
        // parentheticalPossibilities('x(mn)yz'); // ->
        // [ 'xmyz', 'xnyz' ]
    // test_01:
        // parentheticalPossibilities("(qr)ab(stu)c"); // ->
        // [ 'qabsc', 'qabtc', 'qabuc', 'rabsc', 'rabtc', 'rabuc' ]
    // test_02:
        // parentheticalPossibilities("taco"); // ->
        // ['taco']
    // test_03:
        // parentheticalPossibilities(""); // ->
        // ['']
    // test_04:
        // parentheticalPossibilities("(etc)(blvd)(cat)"); // ->
        // [
        //  'ebc', 'eba', 'ebt', 'elc', 'ela',
        //  'elt', 'evc', 'eva', 'evt', 'edc',
        //  'eda', 'edt', 'tbc', 'tba', 'tbt',
        //  'tlc', 'tla', 'tlt', 'tvc', 'tva',
        //  'tvt', 'tdc', 'tda', 'tdt', 'cbc',
        //  'cba', 'cbt', 'clc', 'cla', 'clt',
        //  'cvc', 'cva', 'cvt', 'cdc', 'cda',
        //  'cdt'
        // ]





// substituting synonyms

    // Write a function, substitutingSynonyms, that takes in a sentence and an object as arguments.The object contains words as keys whose values are arrays containing synonyms.The function should return an array containing all possible sentences that can be formed by substituting words of the sentence with their synonyms.
    // You may return the possible sentences in any order, as long as you return all of them.

    // test_00:
        // const sentence = "follow the yellow brick road";
        // const synonyms = {
            // follow: ["chase", "pursue"],
            // yellow: ["gold", "amber", "lemon"],
        // };

        // substituteSynonyms(sentence, synonyms);
        // [
        //   'chase the gold brick road',
        //   'chase the amber brick road',
        //   'chase the lemon brick road',
        //   'pursue the gold brick road',
        //   'pursue the amber brick road',
        //   'pursue the lemon brick road'
        // ]
        
    // test_01:
        // const sentence = "I think it's gonna be a long long time";
        // const synonyms = {
            // think: ["believe", "reckon"],
            // long: ["lengthy", "prolonged"],
        // };

        // substituteSynonyms(sentence, synonyms);
        // [
        //   "I believe it's gonna be a lengthy lengthy time",
        //   "I believe it's gonna be a lengthy prolonged time",
        //   "I believe it's gonna be a prolonged lengthy time",
        //   "I believe it's gonna be a prolonged prolonged time",
        //   "I reckon it's gonna be a lengthy lengthy time",
        //   "I reckon it's gonna be a lengthy prolonged time",
        //   "I reckon it's gonna be a prolonged lengthy time",
        //   "I reckon it's gonna be a prolonged prolonged time"
        // ]
        
    // test_02:
        // const sentence = "palms sweaty knees weak arms heavy";
        // const synonyms = {
            // palms: ["hands", "fists"],
            // heavy: ["weighty", "hefty", "burdensome"],
            // weak: ["fragile", "feeble", "frail", "sickly"],
        // };

        // substituteSynonyms(sentence, synonyms);
        // [
        //   'hands sweaty knees fragile arms weighty',
        //   'hands sweaty knees fragile arms hefty',
        //   'hands sweaty knees fragile arms burdensome',
        //   'hands sweaty knees feeble arms weighty',
        //   'hands sweaty knees feeble arms hefty',
        //   'hands sweaty knees feeble arms burdensome',
        //   'hands sweaty knees frail arms weighty',
        //   'hands sweaty knees frail arms hefty',
        //   'hands sweaty knees frail arms burdensome',
        //   'hands sweaty knees sickly arms weighty',
        //   'hands sweaty knees sickly arms hefty',
        //   'hands sweaty knees sickly arms burdensome',
        //   'fists sweaty knees fragile arms weighty',
        //   'fists sweaty knees fragile arms hefty',
        //   'fists sweaty knees fragile arms burdensome',
        //   'fists sweaty knees feeble arms weighty',
        //   'fists sweaty knees feeble arms hefty',
        //   'fists sweaty knees feeble arms burdensome',
        //   'fists sweaty knees frail arms weighty',
        //   'fists sweaty knees frail arms hefty',
        //   'fists sweaty knees frail arms burdensome',
        //   'fists sweaty knees sickly arms weighty',
        //   'fists sweaty knees sickly arms hefty',
        //   'fists sweaty knees sickly arms burdensome'
        // ]
